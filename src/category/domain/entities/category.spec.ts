import { Category } from "./category";
import { describe, it, test } from "node:test";
import assert from "node:assert";

describe("Category Unit Tests", () => {
  test("should create a new category with undefined values", () => {
    const categoryTest = new Category({
      name: "Movie",
    });

    delete categoryTest.props.created_at;

    assert.deepStrictEqual(categoryTest.props, {
      name: "Movie",
      is_active: true,
      description: undefined,
    });
  });

  test("should create a new category", () => {
    const newDate = new Date();
    const category = new Category({
      name: "Movie",
      is_active: true,
      created_at: newDate,
      description: "Movie description",
    });

    const expectedProps = {
      name: "Movie",
      is_active: true,
      created_at: newDate,
      description: "Movie description",
    };

    assert.deepStrictEqual(category.props, expectedProps);
  });

  test("should check if created_at belong to a Date instance", () => {
    const newDate = new Date();
    const category = new Category({
      name: "Movie",
      is_active: true,
      created_at: newDate,
      description: "Movie description",
    });

    assert.equal(category.props.created_at instanceof Date, true);
  });

  test("should check if id is auto generated by uuid", () => {
    const category = new Category({
      name: "Movie",
    });

    assert.equal(!!category.id, true);
  });

  test("should check if id is auto generated by uuid even if is empty, null or undefined", () => {
    const category2 = new Category(
      {
        name: "Movie",
      },
      null
    );

    assert.equal(!!category2.id, true);

    const category3 = new Category(
      {
        name: "Movie",
      },
      undefined
    );

    assert.equal(!!category3.id, true);
  });

  test("should check getter and setter of category name", () => {
    const category = new Category({
      name: "Movie",
    });
    assert.equal(category.name, "Movie");

    category["name"] = "Movie 2";
    assert.equal(category.name, "Movie 2");
  });

  test("should activate category", () => {
    const category = new Category({
      name: "Movie",
      is_active: false,
    });

    category.active();
    assert.equal(category.is_active, true);
  });
});

it("should update a category", () => {
  const category = new Category({
    name: "Movie",
  });

  category.update("Movie 2", "Movie description");
  assert.equal(category.name, "Movie 2");
  assert.equal(category.description, "Movie description");
});
